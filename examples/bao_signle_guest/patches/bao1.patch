diff --git a/Makefile b/Makefile
index 124edc1..b75d423 100644
--- a/Makefile
+++ b/Makefile
@@ -25,8 +25,8 @@ size=		$(CROSS_COMPILE)size
 HOST_CC:=gcc
 
 #Makefile arguments and default values
-DEBUG:=n
-OPTIMIZATIONS:=2
+DEBUG:=y
+OPTIMIZATIONS:=0
 CONFIG=
 PLATFORM=
 
@@ -231,11 +231,11 @@ $(ld_script_temp).d: $(ld_script)
 
 $(build_dir)/%.d : $(src_dir)/%.[c,S]
 	@echo "Creating dependency	$(patsubst $(cur_dir)/%, %, $<)"
-	@$(cc) -MM -MG -MT "$(patsubst %.d, %.o, $@) $@"  $(CPPFLAGS) $< > $@
+	$(cc) -MM -MG -MT "$(patsubst %.d, %.o, $@) $@"  $(CPPFLAGS) $< > $@
 
 $(objs-y):
 	@echo "Compiling source	$(patsubst $(cur_dir)/%, %, $<)"
-	@$(cc) $(CFLAGS) -c $< -o $@
+	$(cc) $(CFLAGS) -c $< -o $@
 
 %.bin: %.elf
 	@echo "Generating binary	$(patsubst $(cur_dir)/%, %, $@)"
diff --git a/src/arch/riscv/arch.mk b/src/arch/riscv/arch.mk
index 4ed8304..9eff041 100644
--- a/src/arch/riscv/arch.mk
+++ b/src/arch/riscv/arch.mk
@@ -35,7 +35,7 @@ else ifeq ($(ARCH_SUB), riscv32)
 arch-cppflags+=-DRV_XLEN=32
 endif
 arch-cppflags+=-DIRQC=$(IRQC)
-arch-cflags = -mcmodel=medany -march=$(riscv_march) -mstrict-align
+arch-cflags = -mcmodel=medany -march=$(riscv_march) -mstrict-align  -mabi=$(riscv_mabi)
 arch-asflags =
 arch-ldflags = 
 
diff --git a/src/arch/riscv/irqc/plic/inc/irqc.h b/src/arch/riscv/irqc/plic/inc/irqc.h
index 1c022ec..7e8c872 100644
--- a/src/arch/riscv/irqc/plic/inc/irqc.h
+++ b/src/arch/riscv/irqc/plic/inc/irqc.h
@@ -18,28 +18,29 @@
 
 static inline void irqc_init()
 {
-    plic_init();
+    //plic_init();
 }
 
 static inline void irqc_cpu_init()
 {
-    plic_cpu_init();
+    //plic_cpu_init();
 }
 
 static inline void irqc_config_irq(irqid_t int_id, bool en)
 {
-    plic_set_enbl(cpu()->arch.plic_cntxt, int_id, en);
-    plic_set_prio(int_id, 0xFE);
+    //plic_set_enbl(cpu()->arch.plic_cntxt, int_id, en);
+    //plic_set_prio(int_id, 0xFE);
 }
 
 static inline void irqc_handle()
 {
-    plic_handle();
+    //plic_handle();
 }
 
 static inline bool irqc_get_pend(irqid_t int_id)
 {
-    return plic_get_pend(int_id);
+    //return plic_get_pend(int_id);
+    return false;
 }
 
 static inline void irqc_clr_pend(irqid_t int_id)
@@ -49,7 +50,7 @@ static inline void irqc_clr_pend(irqid_t int_id)
 
 static inline void virqc_set_hw(struct vm* vm, irqid_t id)
 {
-    vplic_set_hw(vm, id);
+    //vplic_set_hw(vm, id);
 }
 
 #endif // IRQC_H
diff --git a/src/arch/riscv/spmp/spmp.c b/src/arch/riscv/spmp/spmp.c
index c241730..8acb03e 100644
--- a/src/arch/riscv/spmp/spmp.c
+++ b/src/arch/riscv/spmp/spmp.c
@@ -469,10 +469,11 @@ bool mpu_unmap(struct addr_space* as, struct mp_region* mem) {
 
 void mpu_init() {
 
-    ssize_t nentries = bit64_ffs(~csrs_spmpswitch_read());
-    if (nentries < 0) {
-        nentries = 64;
-    }
+    ssize_t nentries = 64;
+    //ssize_t nentries = bit64_ffs(~csrs_spmpswitch_read());
+    //if (nentries < 0) {
+    //    nentries = 64;
+    //}
 
     // We count one less entry as we reserve the last entry as a "block anything" entry for
     // the hypervisor, so that other entries can be seen as whitelist
diff --git a/src/arch/riscv/sync_exceptions.c b/src/arch/riscv/sync_exceptions.c
index 0f6a6db..01db0ee 100644
--- a/src/arch/riscv/sync_exceptions.c
+++ b/src/arch/riscv/sync_exceptions.c
@@ -13,11 +13,11 @@
 void internal_exception_handler(unsigned long gprs[])
 {
     for (int i = 0; i < 31; i++) {
-        console_printk("x%d:\t\t0x%0lx\n", i, gprs[i]);
+        console_printk("x%d:\t\t0x%x\n", i, gprs[i]);
     }
-    console_printk("sstatus:\t0x%0lx\n", csrs_sstatus_read());
-    console_printk("stval:\t\t0x%0lx\n", csrs_stval_read());
-    console_printk("sepc:\t\t0x%0lx\n", csrs_sepc_read());
+    console_printk("sstatus:\t0x%x\n", csrs_sstatus_read());
+    console_printk("stval:\t\t0x%x\n", csrs_stval_read());
+    console_printk("sepc:\t\t0x%x\n", csrs_sepc_read());
     ERROR("cpu%d internal hypervisor abort - PANIC\n", cpu()->id);
 }
 
diff --git a/src/core/init.c b/src/core/init.c
index 1439c52..8229d70 100644
--- a/src/core/init.c
+++ b/src/core/init.c
@@ -22,11 +22,14 @@ void init(cpuid_t cpu_id, paddr_t load_addr)
      */
 
     cpu_init(cpu_id, load_addr);
+
+    console_init();
+
     mem_init(load_addr);
 
     /* -------------------------------------------------------------- */
 
-    console_init();
+    //console_init();
 
     if (cpu_is_master()) {
         console_printk("Bao Hypervisor\n\r");
diff --git a/src/core/vmm.c b/src/core/vmm.c
index bd8a697..e018187 100644
--- a/src/core/vmm.c
+++ b/src/core/vmm.c
@@ -201,6 +201,7 @@ void vmm_init()
     bool master = false;
     vmid_t vm_id = -1;
     while (vmm_get_next_assigned_vm(&master, &vm_id)) {
+        INFO("Initializing VM %d ... \n", vm_id);
         struct vm_allocation* vm_alloc = vmm_alloc_install_vm(vm_id, master);
         struct vm_config* vm_config = &config.vmlist[vm_id];
         vm_init(vm_alloc, vm_config, master, vm_id);
