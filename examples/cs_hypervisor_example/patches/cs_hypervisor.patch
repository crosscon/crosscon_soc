diff --git a/src/arch/riscv/cpu.c b/src/arch/riscv/cpu.c
index 4bdfb11..75c9c93 100644
--- a/src/arch/riscv/cpu.c
+++ b/src/arch/riscv/cpu.c
@@ -8,6 +8,8 @@
 #include <arch/sbi.h>
 #include <platform.h>
 
+#include <arch/crosscon_soc.h>
+
 cpuid_t CPU_MASTER __attribute__((section(".data")));
 
 /* Perform architecture dependent cpu cores initializations */
@@ -30,6 +32,20 @@ void cpu_arch_init(cpuid_t cpuid, paddr_t load_addr)
     spmp_init(&cpu()->arch.spmp_hyp, PRIV_HYP);
     spmp_set_active(&cpu()->arch.spmp_hyp, true);
 #endif
+
+    // CROSSCON SoC specific
+    // TODO: This is specific for the platform. Find a better place for this.
+
+    // Allow both VM1 (domain 0) and VM2 (domain 1) to access UART.
+    uint32_t *apb_sub_pg_csrs = (uint32_t*) APB_SUB_PG_CSR_ADR;
+    set_pg_rspace_entry(apb_sub_pg_csrs, 0, 0, UART_ADDR, UART_ADDR + 0xfffff, true, true);
+    set_pg_rspace_entry(apb_sub_pg_csrs, 2, 1, UART_ADDR, UART_ADDR + 0xfffff, true, true);
+
+    // TODO: Needs to be dynamically set.
+    uint32_t *qmem_pg_csrs = (uint32_t*) QMEM_PG_CSR_ADR;
+    // PG's QMEM PG so that AES-GCM can access VM1's and VM2's memory over AHB bus.
+    set_pg_rspace_entry(qmem_pg_csrs, 0, 0, 0x60000, 0x70000, true, true);
+    set_pg_rspace_entry(qmem_pg_csrs, 2, 1, 0x70000, 0x80000, true, true);
 }
 
 void cpu_arch_standby(void)
diff --git a/src/arch/riscv/crosscon_soc.c b/src/arch/riscv/crosscon_soc.c
new file mode 100644
index 0000000..6bbb555
--- /dev/null
+++ b/src/arch/riscv/crosscon_soc.c
@@ -0,0 +1,56 @@
+/*
+ * Copyright (c) 2014-2024 Beyond Semiconductor
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the company may not be used to endorse or promote
+ *    products derived from this software without specific prior written
+ *    permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BEYOND SEMICONDUCTOR ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL BEYOND SEMICONDUCTOR BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
+ * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <arch/crosscon_soc.h>
+
+#include <stdint.h>
+#include <stdbool.h>
+
+// Set address range entry of PG in restricted address space mode.
+void set_pg_rspace_entry(
+    uint32_t* pg_csrs_base,
+    uint8_t entry,
+    uint8_t did,
+    uint32_t from_addr,
+    uint32_t to_addr,
+    bool allow_read,
+    bool allow_write)
+{
+    pg_csrs_base[PG_RAS_ADDR_FIRST_REG_ADDR + entry] = from_addr;
+    pg_csrs_base[PG_RAS_ADDR_FIRST_REG_ADDR + entry + 1] = to_addr;
+    pg_csrs_base[PG_RAS_ACC_PRM_FIRST_REG_ADDR + entry] = (uint32_t) (
+        (1 << PG_RAS_ACC_PRM_REG_A_BIT) |
+        (did << PG_RAS_ACC_PRM_REG_DID_LOW) |
+        (allow_read << PG_RAS_ACC_PRM_REG_R_BIT) |
+        (allow_write << PG_RAS_ACC_PRM_REG_W_BIT));
+}
+
+// Clear address range entry of PG in restricted address space mode.
+void clear_pg_rspace_entry(uint32_t* pg_csrs_base, uint8_t entry) {
+    pg_csrs_base[PG_RAS_ACC_PRM_FIRST_REG_ADDR + entry] = (uint32_t) (0 << PG_RAS_ACC_PRM_REG_A_BIT);
+}
diff --git a/src/arch/riscv/inc/arch/crosscon_soc.h b/src/arch/riscv/inc/arch/crosscon_soc.h
new file mode 100644
index 0000000..d83d149
--- /dev/null
+++ b/src/arch/riscv/inc/arch/crosscon_soc.h
@@ -0,0 +1,119 @@
+/*
+ * Copyright (c) 2014-2024 Beyond Semiconductor
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the company may not be used to endorse or promote
+ *    products derived from this software without specific prior written
+ *    permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY BEYOND SEMICONDUCTOR ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL BEYOND SEMICONDUCTOR BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
+ * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef __CROSSCON_SOC_H__
+#define __CROSSCON_SOC_H__
+
+#include <stdint.h>
+#include <stdbool.h>
+
+// UART base address
+#define UART_ADDR 0x10700000
+
+// BA51's DID register
+#define PG_ADD_SIG_DRV_ADR 0x23100000
+
+// QMEM's PG registers base address
+#define QMEM_PG_CSR_ADR 0x23200000
+// APB subsystem's PG registers base address
+#define APB_SUB_PG_CSR_ADR 0x23300000
+
+//
+// Restricted address space mode configuration registers
+//
+
+// Number of available address ranges. Needs to be adjusted to the actual
+// number of ranges supported by a specific instance of PG.
+#define PG_RAS_NUM_OF_RANGES 8
+// The address of the first range address register
+#define PG_RAS_ADDR_FIRST_REG_ADDR 0x10
+// The address of the first range access permission registers
+#define PG_RAS_ACC_PRM_FIRST_REG_ADDR (PG_RAS_ADDR_FIRST_REG_ADDR + PG_RAS_NUM_OF_RANGES + 1)
+                                                                                
+// The range address permission field indices
+// Read permission index
+#define PG_RAS_ACC_PRM_REG_R_BIT 0
+// Write permission index
+#define PG_RAS_ACC_PRM_REG_W_BIT 1
+// Start and end of the DID field
+#define PG_RAS_ACC_PRM_REG_DID_SIZE 29
+#define PG_RAS_ACC_PRM_REG_DID_LOW 2
+#define PG_RAS_ACC_PRM_REG_DID_HIGH (PG_RAS_ACC_PRM_REG_DID_LOW + PG_RAS_ACC_PRM_REG_DID_SIZE)
+ // Range active index - HIGH when the range has a valid address and permissions.
+#define PG_RAS_ACC_PRM_REG_A_BIT 31
+
+//
+// AES-GCM accelerator registers
+//
+
+// AES-GCM base address
+#define AES_MM_CFG_BASE_ADR 0x24000000
+
+// State register
+#define AES_GCM_STATE_REG 0
+// Encryption / decryption registers
+#define AES_GCM_ENCRYPT_REG 1
+// Key length register
+#define AES_GCM_KEYL_REG 2
+// Key register
+#define AES_GCM_KEY_REG 3
+// Initialization vector register
+#define AES_GCM_IV_REG 11
+// Address length
+#define AES_GCM_A_LEN_REG 14
+// Data length
+#define AES_GCM_D_LEN_REG 15
+// Address where the input data is located
+#define AES_GCM_IN_D_ADDR_REG 16
+// Address where the output data is located
+#define AES_GCM_OUT_D_ADDR_REG 17
+
+// State register fields
+// Needs to be set to HIGH when the master has provided the initialization parameters.
+#define AES_GCM_STATE_INIT_FLAG 0
+// HIGH when input data is ready. Can only be written to.
+#define AES_GCM_STATE_IN_D_RDY_FLAG 1
+// HIGH when output data is ready. Can only be read.
+#define AES_GCM_STATE_OUT_D_RDY_FLAG 2
+// HIGH when tag is ready.
+#define AES_GCM_STATE_TAG_RDY_FLAG 3
+
+// Set address range entry of PG in restricted address space mode.
+void set_pg_rspace_entry(
+    uint32_t* pg_csrs_base,
+    uint8_t entry,
+    uint8_t did,
+    uint32_t from_addr,
+    uint32_t to_addr,
+    bool allow_read,
+    bool allow_write);
+
+// Clear address range entry of PG in restricted address space mode.
+void clear_pg_rspace_entry(uint32_t* pg_csrs_base, uint8_t entry);
+
+#endif /* __CROSSCON_SOC_H__ */
diff --git a/src/arch/riscv/objects.mk b/src/arch/riscv/objects.mk
index 4684074..b639765 100644
--- a/src/arch/riscv/objects.mk
+++ b/src/arch/riscv/objects.mk
@@ -13,3 +13,4 @@ cpu-objs-y+=cache.o
 cpu-objs-y+=aclint.o
 cpu-objs-y+=vfp.o
 cpu-objs-y+=timer.o
+cpu-objs-y+=crosscon_soc.o
diff --git a/src/arch/riscv/spmp/boot.S b/src/arch/riscv/spmp/boot.S
index 5fe72f1..f65f4b7 100644
--- a/src/arch/riscv/spmp/boot.S
+++ b/src/arch/riscv/spmp/boot.S
@@ -15,8 +15,8 @@ boot_arch:
     /* Set sscratch to point to cpu struct and clear it*/
     la  t0, _image_end
     li  t1, CPU_SIZE
-    mul t1, t1, a0
-    add a3, t0, t1
+    mul t2, t1, a0
+    add a3, t0, t2
     csrw sscratch, a3
     add a4, a3, t1
 	call boot_clear
diff --git a/src/arch/riscv/vm.c b/src/arch/riscv/vm.c
index 7dbc935..42cf20b 100644
--- a/src/arch/riscv/vm.c
+++ b/src/arch/riscv/vm.c
@@ -11,6 +11,8 @@
 #include <string.h>
 #include <config.h>
 
+#include <arch/crosscon_soc.h>
+
 void vm_arch_init(struct vm* vm, const struct vm_config* vm_config)
 {
 #ifdef MEM_PROT_MMU
@@ -133,6 +135,13 @@ void vcpu_restore_state(struct vcpu* vcpu)
     spmp_set_active(&vcpu->arch.spmp, true);
     spmp_restore(&vcpu->arch.spmp);
 #endif
+
+    // CROSSCON SoC specific
+    // TODO: This is specific for the platform. Find a better place for this.
+
+    #define PG_ADD_SIG_DRV_ADR 0x23100000
+    uint32_t *pg_add_sig_drv = (uint32_t*) PG_ADD_SIG_DRV_ADR;
+    pg_add_sig_drv[0] = vcpu->vm->id;
 }
 
 void vcpu_save_state(struct vcpu* vcpu)
diff --git a/src/platform/crosscon_soc/platform.mk b/src/platform/crosscon_soc/platform.mk
index db18893..92d5699 100644
--- a/src/platform/crosscon_soc/platform.mk
+++ b/src/platform/crosscon_soc/platform.mk
@@ -17,6 +17,7 @@ platform_description:=crosscon-soc_desc.c
 arch_mem_prot:=mpu
 
 platform-cppflags =-DIPIC=$(IPIC)
+platform-cppflags +=-std=c11
 platform-cflags =
 platform-asflags =
 platform-ldflags =
